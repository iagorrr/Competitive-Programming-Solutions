#include <bits/stdc++.h>
using namespace std;
#define endl '\n'
#define fastio                      \
  ios_base::sync_with_stdio(false); \
  cin.tie(0);                       \
  cout.tie(0);
#define len(__x) (int)__x.size()
using ll = long long;
using ld = long double;
using vll = vector<ll>;
using pll = pair<ll, ll>;
using vll2d = vector<vll>;
using vi = vector<int>;
using vi2d = vector<vi>;
using pii = pair<int, int>;
using vii = vector<pii>;
using vc = vector<char>;
#define all(a) a.begin(), a.end()
#define snd second
#define fst first
#define pb(___x) push_back(___x)
#define mp(___a, ___b) make_pair(___a, ___b)
#define eb(___x) emplace_back(___x)

const ll oo = 1e18;

// builds the minimum spanning tree but don't use the edge x->y or y->x
vector<pll> kruskall(const vector<pll> &g, int x, int y) {

}
void run() {
  int n, m;
  cin >> n >> m;

  vector<pll> g(n + 1);
  vector<array<ll, 3>> q;
  for (int i = 0; i < m; i++) {
    int u, v;
    ll l;
    cin >> u >> v >> l;
    g[u].emplace_back(l, v);
    g[v].emplace_back(l, u);

    q.push_back({u, v, l});
  }

  vll2d dists(n + 1, vll(n + 1));
  for (int i = 1; i <= n; i++) {
    for (int j = i + 1; j <= n; j++) {
      auto g2 = kruskall(g, i, j);
      auto dist = dijkstra(g, i);
      dists[i][j] = dist[j];
    }
  }
}
int32_t main(void) {
  fastio;
  int t;
  t = 1;
  // cin >> t;
  while (t--) run();
}
